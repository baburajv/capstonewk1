data()
a <- charToRaw("Baburaj")
a
class(a)
a <- charToRaw("Baburaj")
a
class(a)
a <- c(1,2,3,4,5,6)
a
class(a)
a <- charToRaw("Baburaj")
a
class(a)
a <- c(1,2,3,4,5,6)
a
class(a)
a<- c(TRUE, "Baburaj", 100.25)
a
class(a)
a <- charToRaw("Baburaj")
a
class(a)
a <- c(1,2,3,4,5,6)
a
class(a)
a<- c(TRUE, "Baburaj", 100.25)
a
class(a)
a <- list(1, "Baburaj", TRUE)
a
class(a)
a <- charToRaw("Baburaj")
a
class(a)
a <- c(1,2,3,4,5,6)
a
class(a)
a<- c(TRUE, "Baburaj", 100.25)
a
class(a)
a <- list(1, "Baburaj", TRUE)
a
class(a)
class(a[2])
a <- charToRaw("Baburaj")
a
class(a)
a <- c(1,2,3,4,5,6)
a
class(a)
a<- c(TRUE, "Baburaj", 100.25)
a
class(a)
a <- list(1, "Baburaj", TRUE)
a
class(a)
class(a[[2]])
a <- charToRaw("Baburaj")
a
class(a)
a <- c(1,2,3,4,5,6)
a
class(a)
a<- c(TRUE, "Baburaj", 100.25)
a
class(a)
a <- list(1, "Baburaj", TRUE)
a
class(a)
class(a[[1]])
a <- charToRaw("Baburaj")
a
class(a)
a <- c(1,2,3,4,5,6)
a
class(a)
a<- c(TRUE, "Baburaj", 100.25)
a
class(a)
a <- list(1, "Baburaj", TRUE)
a
class(a)
class(a[[1]])
a <- list(c(1,2,4,5,6))
a
class(a)
print(a[1])
a <- charToRaw("Baburaj")
a
class(a)
a <- c(1,2,3,4,5,6)
a
class(a)
a<- c(TRUE, "Baburaj", 100.25)
a
class(a)
a <- list(1, "Baburaj", TRUE)
a
class(a)
class(a[[1]])
a <- list(c(1,2,4,5,6))
a
class(a)
print(a[1][2])
a <- charToRaw("Baburaj")
a
class(a)
a <- c(1,2,3,4,5,6)
a
class(a)
a<- c(TRUE, "Baburaj", 100.25)
a
class(a)
a <- list(1, "Baburaj", TRUE)
a
class(a)
class(a[[1]])
a <- list(c(1,2,4,5,6))
a
class(a)
print(a[[1]][2])
library(stringi)
library(kableExtra)
library(qdap)
library(rJava)
#
# This script is to download the Coursera-SwiftKey.zip
# file from the given URL and extract the contents
#
# set source file URL and the default name of the file downloaded from the source url
sourceFileURL= "https://d396qusza40orc.cloudfront.net/dsscapstone/dataset/Coursera-SwiftKey.zip"
downloadedFile=paste0("./data/" ,"Coursera-SwiftKey.zip")
downloadFolder=paste0("./data/" , "Coursera-SwiftKey")
# check if the downloaded file exist. Download if it does not...
if(!file.exists(downloadedFile)){
result <- tryCatch(download.file(sourceFileURL,downloadedFile,method="auto"),
error=function(e)1)
if (result != 1){
unzip(downloadedFile,exdir=downloadFolder)
}
}
# after extracting from archive, get all file names from the extracted folder
files <- list.files(downloadFolder, recursive = TRUE,full.names= TRUE)
en_files <- c("./data/Coursera-SwiftKey/final/en_US/en_US.blogs.txt",
"./data/Coursera-SwiftKey/final/en_US/en_US.news.txt",
"./data/Coursera-SwiftKey/final/en_US/en_US.twitter.txt")
result <- sapply(en_files, fileInfo)
colnames(result) <-c("Blogs", "News", "Twitter")
rownames(result) <-c("File Size (MB)", "Lines", "Words (Million)")
result_df <- as.data.frame(result)
kable(result_df)
SAMPLE_DATA_PERCENT <- 0.05
samples <- sapply (en_files, sampleDataFile, SAMPLE_DATA_PERCENT)
sampleData <- sapply(samples, read.table, sep = "\t", quote = "")
sampleDataNames <- c("news","blogs","twitter")
sampleData <- setNames(sampleData, sampleDataNames)
sampleData <- sapply(sampleData, as.character)
newsData <- unname(unlist(sapply(sampleData$news, sent_detect)))
blogsData <- unname(unlist(sapply(sampleData$blogs, sent_detect)))
twitterData <- unname(unlist(sapply(sampleData$twitter, sent_detect)))
###
## the function fileInfo takes a filename as input and
## returns the file size, number of lines and number of words
###
fileInfo <- function(filename){
sizeMB <- (file.size(filename)/(1024.0 *1024.0))
filehandle <- file(filename, open ="r")
contents <- readLines(filehandle, encoding="UTF-8", skipNul = TRUE)
numlines <-length(contents)
numwords <- (sum(stri_count_regex(contents,"\\s+"))/(1000.0*1000.0))
close(filehandle)
result <- list("size(MB)" = sizeMB, "numLines" = numlines, "wordCount(Million)" = numwords )
return (result)
}
##
## function sampleDataFile takes a filename and a sample data percent
## as input and creates a new file sample_<filename> that contains
## a sample from the main file. This is done to speed up the analysis
set.seed(238)
sampleDataFile <- function (filename, SAMPLE_DATA_PERCENT){
fileHandle <- file (filename, open ="r")
contents <- readLines(fileHandle, encoding ="UTF-8", skipNul = TRUE)
sampledData <- contents[ sample(length(contents), SAMPLE_DATA_PERCENT * length(contents))]
sampledDataFileName <- paste0(dirname(filename),paste0("//",paste0("sample_", basename(filename))))
write(sampledData, file =sampledDataFileName, ncolumns = 1, append = FALSE, sep = "\t" )
close (fileHandle)
return (sampledDataFileName)
}
library(stringi)
library(kableExtra)
library(qdap)
library(rJava)
#
# This script is to download the Coursera-SwiftKey.zip
# file from the given URL and extract the contents
#
# set source file URL and the default name of the file downloaded from the source url
sourceFileURL= "https://d396qusza40orc.cloudfront.net/dsscapstone/dataset/Coursera-SwiftKey.zip"
downloadedFile=paste0("./data/" ,"Coursera-SwiftKey.zip")
downloadFolder=paste0("./data/" , "Coursera-SwiftKey")
# check if the downloaded file exist. Download if it does not...
if(!file.exists(downloadedFile)){
result <- tryCatch(download.file(sourceFileURL,downloadedFile,method="auto"),
error=function(e)1)
if (result != 1){
unzip(downloadedFile,exdir=downloadFolder)
}
}
# after extracting from archive, get all file names from the extracted folder
files <- list.files(downloadFolder, recursive = TRUE,full.names= TRUE)
en_files <- c("./data/Coursera-SwiftKey/final/en_US/en_US.blogs.txt",
"./data/Coursera-SwiftKey/final/en_US/en_US.news.txt",
"./data/Coursera-SwiftKey/final/en_US/en_US.twitter.txt")
result <- sapply(en_files, fileInfo)
colnames(result) <-c("Blogs", "News", "Twitter")
rownames(result) <-c("File Size (MB)", "Lines", "Words (Million)")
result_df <- as.data.frame(result)
kable(result_df)
SAMPLE_DATA_PERCENT <- 0.05
samples <- sapply (en_files, sampleDataFile, SAMPLE_DATA_PERCENT)
sampleData <- sapply(samples, read.table, sep = "\t", quote = "")
sampleDataNames <- c("news","blogs","twitter")
sampleData <- setNames(sampleData, sampleDataNames)
sampleData <- sapply(sampleData, as.character)
newsData <- unname(unlist(sapply(sampleData$news, sent_detect)))
blogsData <- unname(unlist(sapply(sampleData$blogs, sent_detect)))
twitterData <- unname(unlist(sapply(sampleData$twitter, sent_detect)))
###
## the function fileInfo takes a filename as input and
## returns the file size, number of lines and number of words
###
fileInfo <- function(filename){
sizeMB <- (file.size(filename)/(1024.0 *1024.0))
filehandle <- file(filename, open ="r")
contents <- readLines(filehandle, encoding="UTF-8", skipNul = TRUE)
numlines <-length(contents)
numwords <- (sum(stri_count_regex(contents,"\\s+"))/(1000.0*1000.0))
close(filehandle)
result <- list("size(MB)" = sizeMB, "numLines" = numlines, "wordCount(Million)" = numwords )
return (result)
}
##
## function sampleDataFile takes a filename and a sample data percent
## as input and creates a new file sample_<filename> that contains
## a sample from the main file. This is done to speed up the analysis
set.seed(238)
sampleDataFile <- function (filename, SAMPLE_DATA_PERCENT){
fileHandle <- file (filename, open ="r")
contents <- readLines(fileHandle, encoding ="UTF-8", skipNul = TRUE)
sampledData <- contents[ sample(length(contents), SAMPLE_DATA_PERCENT * length(contents))]
sampledDataFileName <- paste0(dirname(filename),paste0("//",paste0("sample_", basename(filename))))
write(sampledData, file =sampledDataFileName, ncolumns = 1, append = FALSE, sep = "\t" )
close (fileHandle)
return (sampledDataFileName)
}
library(stringi)
library(kableExtra)
library(qdap)
library(rJava)
#
# This script is to download the Coursera-SwiftKey.zip
# file from the given URL and extract the contents
#
# set source file URL and the default name of the file downloaded from the source url
sourceFileURL= "https://d396qusza40orc.cloudfront.net/dsscapstone/dataset/Coursera-SwiftKey.zip"
downloadedFile=paste0("./data/" ,"Coursera-SwiftKey.zip")
downloadFolder=paste0("./data/" , "Coursera-SwiftKey")
# check if the downloaded file exist. Download if it does not...
if(!file.exists(downloadedFile)){
result <- tryCatch(download.file(sourceFileURL,downloadedFile,method="auto"),
error=function(e)1)
if (result != 1){
unzip(downloadedFile,exdir=downloadFolder)
}
}
# after extracting from archive, get all file names from the extracted folder
files <- list.files(downloadFolder, recursive = TRUE,full.names= TRUE)
en_files <- c("./data/Coursera-SwiftKey/final/en_US/en_US.blogs.txt",
"./data/Coursera-SwiftKey/final/en_US/en_US.news.txt",
"./data/Coursera-SwiftKey/final/en_US/en_US.twitter.txt")
result <- sapply(en_files, fileInfo)
colnames(result) <-c("Blogs", "News", "Twitter")
rownames(result) <-c("File Size (MB)", "Lines", "Words (Million)")
result_df <- as.data.frame(result)
kable(result_df)
SAMPLE_DATA_PERCENT <- 0.05
samples <- sapply (en_files, sampleDataFile, SAMPLE_DATA_PERCENT)
sampleData <- sapply(samples, read.table, sep = "\t", quote = "")
sampleDataNames <- c("news","blogs","twitter")
sampleData <- setNames(sampleData, sampleDataNames)
sampleData <- sapply(sampleData, as.character)
newsData <- unname(unlist(sapply(sampleData$news, sent_detect)))
blogsData <- unname(unlist(sapply(sampleData$blogs, sent_detect)))
twitterData <- unname(unlist(sapply(sampleData$twitter, sent_detect)))
###
## the function fileInfo takes a filename as input and
## returns the file size, number of lines and number of words
###
fileInfo <- function(filename){
sizeMB <- (file.size(filename)/(1024.0 *1024.0))
filehandle <- file(filename, open ="r")
contents <- readLines(filehandle, encoding="UTF-8", skipNul = TRUE)
numlines <-length(contents)
numwords <- (sum(stri_count_regex(contents,"\\s+"))/(1000.0*1000.0))
close(filehandle)
result <- list("size(MB)" = sizeMB, "numLines" = numlines, "wordCount(Million)" = numwords )
return (result)
}
##
## function sampleDataFile takes a filename and a sample data percent
## as input and creates a new file sample_<filename> that contains
## a sample from the main file. This is done to speed up the analysis
set.seed(238)
sampleDataFile <- function (filename, SAMPLE_DATA_PERCENT){
fileHandle <- file (filename, open ="r")
contents <- readLines(fileHandle, encoding ="UTF-8", skipNul = TRUE)
sampledData <- contents[ sample(length(contents), SAMPLE_DATA_PERCENT * length(contents))]
sampledDataFileName <- paste0(dirname(filename),paste0("//",paste0("sample_", basename(filename))))
write(sampledData, file =sampledDataFileName, ncolumns = 1, append = FALSE, sep = "\t" )
close (fileHandle)
return (sampledDataFileName)
}
library(qdap)
Sys.getenv("DYLD_FALLBACK_LIBRARY_PATH")
Sys.getenv("DYLD_FALLBACK_LIBRARY_PATH")
source('C:/Baburaj/Learning/R/capstone/week1/quiz1.R')
setwd("C:/Baburaj/Learning/R/capstone/week1")
